full_leaderboard[,comb_score:=fc_rank+tr_rank]
full_leaderboard <- full_leaderboard[order(comb_score+fc_rank/100)]
setnames(full_leaderboard,c("team","total","pinball","fc_rank","tr_rank","comb_score"),
c("Team","Revenue","Pinball","Forecasting Track Rank","Trading Track Rank","Combined Track Score"))
full_leaderboard[!Team%in%c("Benchmark","quantopia"),`Combined Track Rank`:=.I]
full_leaderboard[Team %in% participants[verified_student==T,team],`Student Team`:="Student Team"]
fwrite(full_leaderboard,"overall_leaderboard.csv")
full_leaderboard
load("Final Scores.Rda")
rm(list=ls())
require(data.table)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Directories containing daily scores
daily_scoring <- list.dirs(path="scoring/")[-1]
# Participant dictionary
participants <- fread("comp_participants.csv")
# Teams that submitted reports
reports <- fread("reports.csv",fill=T,header = F)
participants <- merge(participants,reports[,.(team=V1,report=TRUE)],all.x=T)
# Catching team name changes:
participants[participant_id=="63b8535e-1307-43d1-aee6-d2fc910f76f5",report:=T]
participants[participant_id=="aa841e47-5c74-480a-9a85-7fb2dcc83ba7",report:=T]
participants[participant_id=="1ba1bfa6-fa78-4f9e-8219-2eece439d826",report:=T]
# Verified student teams
student <- fread("students.csv",header = F)
participants <- merge(participants,student[,.(team=V1,verified_student=TRUE)],all.x=T)
setnames(participants,"participant_id","team_id")
rm(reports,student)
# Energy data
energy_data <- fread("Energy_Data_20240119_20240519.csv")
energy_data <- energy_data[dtm>="2024-02-19 23:00:00 UTC" & dtm<="2024-05-19 22:30:00 UTC"]
energy_data[,unique(diff(dtm))]
if(!file.exists("Final Scores.Rda")){
submissions <- list.files(path = "submissions/",recursive = T)
forecast_data <- data.table()
trade_data <- data.table()
for( submission in submissions ) {
print(submission)
temp_sub_data <- fread(paste0("submissions/",submission))
team_id <- substr(submission,12,47)
temp_forecast_data <- temp_sub_data[,.(dtm = rep(timestamp,each=9),
read.table(text = gsub("[{},]", "\n", probabilistic_forecast),
sep = ":",
col.names = c("quantile","forecast")))]
temp_forecast_data[,team_id := team_id]
forecast_data <- rbind(forecast_data,temp_forecast_data)
temp_trade_data <- temp_sub_data[,.(dtm=timestamp,market_bid)]
temp_trade_data[,team_id := team_id]
trade_data <- rbind(trade_data,temp_trade_data)
}
# Calculate pinball
forecast_data <- merge(forecast_data,
energy_data[,.(dtm,actual_mwh=(Wind_MW + Solar_MW)/2 + boa_MWh)],
all.x = T,by = "dtm")
forecast_data[,pinball := (actual_mwh-forecast)*quantile*0.01*(actual_mwh>=forecast) +
(forecast-actual_mwh)*(1-quantile*0.01)*(actual_mwh<forecast)]
forecast_score <- forecast_data[,.(pinball=mean(pinball)),by=c("dtm","team_id")]
forecast_data <- merge(forecast_data,participants,all.x=T,by="team_id")
forecast_data[,team_id:=NULL]
forecast_score <- merge(forecast_score,participants,all.x=T,by="team_id")
forecast_score[,team_id:=NULL]
forecast_score[,filled:=F]
# Fill missing submissions
for(t in forecast_score[team!="Benchmark",unique(team)]){
missing_dtm <- energy_data[!energy_data[,dtm] %in% forecast_score[team==t,dtm],dtm]
fill_data <- forecast_score[team=="Benchmark" & dtm %in% missing_dtm,]
fill_data[,filled:=T]
fill_data[,team:=t]
forecast_score <- rbind(forecast_score,fill_data)
}
# Calculate revenue
trade_data <- merge(trade_data,
energy_data[,.(dtm,
actual_mwh=(Wind_MW + Solar_MW)/2 + boa_MWh,
price=DA_Price,imbalance_price=SS_Price)],
all.x = T,by = "dtm")
trade_data[,revenue := market_bid*price +
(actual_mwh - market_bid)*
(imbalance_price-0.07*(actual_mwh - market_bid))]
trade_data <- merge(trade_data,participants,all.x=T,by="team_id")
trade_data[,filled:=F]
trade_data[,team_id:=NULL]
for(t in trade_data[team!="Benchmark",unique(team)]){
missing_dtm <- energy_data[!energy_data[,dtm] %in% trade_data[team==t,dtm],dtm]
fill_data <- trade_data[team=="Benchmark" & dtm %in% missing_dtm,]
fill_data[,filled:=T]
fill_data[,team:=t]
trade_data <- rbind(trade_data,fill_data)
}
save(trade_data,forecast_data,forecast_score,file = "Final Scores.Rda")
fwrite(forecast_data,file="forecasts.csv")
fwrite(forecast_score,file="pinball.csv")
fwrite(trade_data,file="trades.csv")
}else{
load("Final Scores.Rda")
participants[team_id=="63b8535e-1307-43d1-aee6-d2fc910f76f5",team:="༼ つ ◕_◕ ༽つ"]
}
trade_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
forecast_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
participants[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
forecast_score[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
participants[report==TRUE,]
trade_data[,ceiling(sum(filled)/48),by=team][order(V1)]
completed_teams_trade <- intersect(participants[report==TRUE,team],
trade_data[,.(missed_five_or_less = ceiling(sum(filled)/48) <= 5),by=team][missed_five_or_less==TRUE,team])
trade_leaderboard <- trade_data[team %in% completed_teams_trade,
.(total=sum(revenue)),by=team][order(total,decreasing = T)]
fwrite(trade_leaderboard,
file = "trading_leaderboard.csv")
trade_leaderboard
fwrite(trade_data[team %in% participants[verified_student==T,team],
.(total=sum(revenue)),by=team][order(total,decreasing = T)],
file = "trading_leaderboard_student.csv")
completed_teams_forecast <- intersect(participants[report==TRUE,team],
forecast_score[,.(missed_five_or_less = ceiling(sum(filled)/48) <= 5),by=team][missed_five_or_less==TRUE,team])
completed_teams_forecast
forecast_leaderboard <- forecast_score[team %in% completed_teams_forecast,
.(pinball=mean(pinball)),by=team][order(pinball,decreasing = F)]
forecast_leaderboard
fwrite(forecast_leaderboard,
file="forecast_leaderboard.csv")
fwrite(forecast_score[team %in% participants[verified_student==T,team],
.(pinball=mean(pinball)),by=team][order(pinball,decreasing = F)],
file="forecast_leaderboard_student.csv")
## Combined
forecast_leaderboard[!team%in%c("Benchmark","quantopia"),fc_rank:=order(pinball,decreasing = F)]
trade_leaderboard[!team%in%c("Benchmark","quantopia"),tr_rank:=order(total,decreasing = T)]
full_leaderboard <- merge(forecast_leaderboard,trade_leaderboard,by="team")
full_leaderboard[,comb_score:=fc_rank+tr_rank]
full_leaderboard <- full_leaderboard[order(comb_score+fc_rank/100)]
setnames(full_leaderboard,c("team","total","pinball","fc_rank","tr_rank","comb_score"),
c("Team","Revenue","Pinball","Forecasting Track Rank","Trading Track Rank","Combined Track Score"))
full_leaderboard[!Team%in%c("Benchmark","quantopia"),`Combined Track Rank`:=.I]
full_leaderboard[Team %in% participants[verified_student==T,team],`Student Team`:="Student Team"]
full_leaderboard
fwrite(full_leaderboard,"overall_leaderboard.csv")
## Set-up ######################################################################
require(dplyr)
require(data.table)
require(ggplot2)
require(ggridges)
require(xtable)
library(latex2exp)
require(patchwork)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
###Fig format
fig_format <- "pdf"
fig_size_in <- c(8,4)
custom_theme <- theme_bw() + theme(
text=element_text(size=20,family="serif"),
strip.background =element_rect(fill="white"))
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
## Load data ###################################################################
### Trades, prices and revenue, with missed submissions filled
trade_data <- fread("data/trades.csv")
trade_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Pinball score by timestamp with missed submissions filled
forecast_score <- fread("data/pinball.csv")
forecast_score[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Raw forecast submissions, outturn and pinball, missed submissions not filled
forecast_data <- fread("data/forecasts.csv")
forecast_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Energy data
energy_data <- rbind(fread("data/Energy_Data_20200920_20240118.csv"),
fread("data/Energy_Data_20240119_20240519.csv"))
### leaderboard
leaderboard <- fread("data/overall_leaderboard.csv")
leaderboard[Team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",Team:="༼ つ ◕_◕ ༽つ"]
### Repot data
reports <- fread("data/HEFTcom Reports.csv",
skip = 0,header = T)[-(1:2),]
reports[9,RecipientFirstName:="༼ つ ◕_◕ ༽つ"]
setnames(reports,"RecipientFirstName","team")
## Leaderboard #################################################################
full_leaderboard <- merge(
forecast_score[,.(Pinball=round(mean(pinball),2),
Report=report[1],
Student=verified_student[1]),
by="team"],
trade_data[,.(Revenue=round(sum(revenue)/1e6,2),
`Missed submissions`=round(sum(filled)/48)),
by="team"],
by="team",all=T)
full_leaderboard[Report==T & `Missed submissions`<=5 & !team %in% c("Benchmark","quantopia"),
`Forecasting rank`:=rank(Pinball)]
full_leaderboard[Report==T & `Missed submissions`<=5 & !team %in% c("Benchmark","quantopia")
,`Trading rank`:=rank(-Revenue)]
full_leaderboard[,`Combined score`:=`Trading rank`+`Forecasting rank`+`Forecasting rank`/100]
full_leaderboard[!is.na(`Combined score`),`Combined rank`:=rank(`Combined score`)]
full_leaderboard[,`Combined score`:=NULL]
full_leaderboard <- full_leaderboard[order(Pinball),.(Team=team,Pinball,Revenue,`Forecasting rank`,`Trading rank`,`Combined rank`,Report,`Missed submissions`,Student)]
print(xtable(full_leaderboard), include.rownames=FALSE)
## Summary Plots #######################################################################
### Competition dataset
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2023-12-01",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",value = "Generation [MWh]")
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_energy
ggsave(filename = paste0("figs/wind_solar.",fig_format), p_energy,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-02-24",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]",variable.name = "Market")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=Market)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
# geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
ggsave(filename = paste0("figs/prices.",fig_format), p_price,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
## Forecasting Track ###########################################################
## Pinball evolution
forecast_score_plot <- forecast_score#[dtm < "2024-03-21 00:00:00"]
top_teams_fc <- forecast_score_plot[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
forecast_score_plot <- forecast_score_plot[team %in% top_teams_fc]
setkey(forecast_score_plot,dtm)
forecast_score_plot$team <- factor(forecast_score_plot$team,levels = top_teams_fc)
forecast_score_plot[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score_plot[,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
ggsave(filename = paste0("figs/pinball_top10.",fig_format), p2,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
### Forecast evaluation
team_include <- forecast_data[,.N,by=team][N>(39000/2),team]
include_dtm <- energy_data[,dtm]
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<=7.5 | hour(dtm)>=16.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>7.5 & hour(dtm)<16.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
reliability_data <- reliability_data[team %in% team_include]
plot_data <- reliability_data[team%in%top_teams_fc[1:5]]
plot_data$team <- factor(plot_data$team,levels = top_teams_fc)
rel_plot <- ggplot(plot_data,aes(x=quantile,y=empirical,color=team)) +
geom_line(data=reliability_data[!team%in%top_teams_fc[1:5]],
mapping=aes(x=quantile,y=empirical,group=team),
color=gray(0.1,0.1)) +
geom_point(aes(shape=team)) + geom_line() +
geom_abline(slope = 1,intercept = 0, linetype="dashed") +
facet_wrap(~TOD,ncol=3) +
guides(color=guide_legend(title="Team (Top 5)"),
shape=guide_legend(title="Team (Top 5)")) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
xlab("Nominal [%]") + ylab("Empirical [%]") +
custom_theme +
theme(aspect.ratio = 1)
rel_plot
ggsave(filename = paste0("figs/reliability.",fig_format), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
plot_data
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=str("(Please hug emoji)")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("(Please hug emoji)")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ"]#,team:=paste0("(Please hug emoji)")]
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("(Please hug emoji)")]
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("Please hug emoji")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
fc_methods
labels = leaderboard[order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","Please hug emoji",Team]) +
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[
order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","Please hug emoji",Team)]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[
order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","(Please hug emoji)",Team)]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
ggsave(filename = paste0("figs/forecast_methods.",fig_format), fc_methods,
width = fig_size_in[1],height = fig_size_in[2]+0.2,units = "in")
trade_data
trade_data[,sum(actual_mwh),by=team]
trade_data[,sum(actual_mwh),by=team]1,V1]
trade_data[,sum(actual_mwh),by=team][1,V1]
trade_data[,sum(actual_mwh),by=team][1,V1]/500000
500000/trade_data[,sum(actual_mwh),by=team][1,V1]
150000/trade_data[,sum(actual_mwh),by=team][1,V1]
