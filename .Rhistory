axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
plot_data
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=str("(Please hug emoji)")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
plot_data[team=="༼ つ ◕_◕ ༽つ",team:="(Please hug emoji)"]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("(Please hug emoji)")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
#### Forecast methods
plot_data <- merge(rbind(reports[,.(type="regression",
method=transpose(strsplit(Q3.7,","))),by=team],
reports[,.(type="feature engineering",
method=transpose(strsplit(Q3.5,","))),by=team],
reports[,.(type="model selection",
method=transpose(strsplit(Q3.9,","))),by=team]),
leaderboard[,.(team=Team,Rank=rank(Pinball))],
by = "team",all.y = T)
plot_data[,method := paste0(method)]
plot_data <- plot_data[!method %in% c("None","Others ",
"Others (please specify)",
"Other supervised learning/regression",
"NULL")]
plot_data[,method := gsub("\\(please provide details\\)","",method)]
plot_data[,method := gsub(" based on",":",method)]
top_methods <- plot_data[,.(score=min(Rank,na.rm = T)),by=method]
top_methods <- merge(top_methods,
plot_data[Rank>1,.(score1=min(Rank,na.rm = T)),by=method],
by = "method")
top_methods[order(score+score1/20),score2 := cumsum(score+score1/20)]
plot_data$method <- factor(plot_data$method,
levels = top_methods[order(score2,decreasing = T),method])
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ"]#,team:=paste0("(Please hug emoji)")]
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("(Please hug emoji)")]
plot_data
plot_data[team=="༼ つ ◕_◕ ༽つ",team:=paste0("Please hug emoji")]
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[order(Pinball)][1:26,Team]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
fc_methods
labels = leaderboard[order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","Please hug emoji",Team]) +
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[
order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","Please hug emoji",Team)]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
fc_methods <- ggplot(plot_data[order(Rank)],aes(x=method,y=Rank)) +
ylim(c(1,26)) +
ylab("Team [ordered by pinball]") +
scale_y_continuous(breaks = 1:plot_data[,max(Rank)],
labels = leaderboard[
order(Pinball)][1:26,gsub("༼ つ ◕_◕ ༽つ","(Please hug emoji)",Team)]) +
geom_point() +
coord_flip() +
custom_theme +
theme(axis.title.y=element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle=90,vjust = 0.5,
hjust = 1,size = 10))
fc_methods
ggsave(filename = paste0("figs/forecast_methods.",fig_format), fc_methods,
width = fig_size_in[1],height = fig_size_in[2]+0.2,units = "in")
trade_data
trade_data[,sum(actual_mwh),by=team]
trade_data[,sum(actual_mwh),by=team]1,V1]
trade_data[,sum(actual_mwh),by=team][1,V1]
trade_data[,sum(actual_mwh),by=team][1,V1]/500000
500000/trade_data[,sum(actual_mwh),by=team][1,V1]
150000/trade_data[,sum(actual_mwh),by=team][1,V1]
## Set-up ######################################################################
require(dplyr)
require(data.table)
require(ggplot2)
require(ggridges)
require(xtable)
library(latex2exp)
require(patchwork)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
###Fig format
fig_format <- "pdf"
fig_size_in <- c(8,4)
custom_theme <- theme_bw() + theme(
text=element_text(size=20,family="serif"),
strip.background =element_rect(fill="white"))
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
### Trades, prices and revenue, with missed submissions filled
trade_data <- fread("data/trades.csv")
trade_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Pinball score by timestamp with missed submissions filled
forecast_score <- fread("data/pinball.csv")
forecast_score[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Raw forecast submissions, outturn and pinball, missed submissions not filled
forecast_data <- fread("data/forecasts.csv")
forecast_data[team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",team:="༼ つ ◕_◕ ༽つ"]
### Energy data
energy_data <- rbind(fread("data/Energy_Data_20200920_20240118.csv"),
fread("data/Energy_Data_20240119_20240519.csv"))
### leaderboard
leaderboard <- fread("data/overall_leaderboard.csv")
leaderboard[Team=="à¼¼ ã\u0081¤ â—•_â—• à¼½ã\u0081¤",Team:="༼ つ ◕_◕ ༽つ"]
### Repot data
reports <- fread("data/HEFTcom Reports.csv",
skip = 0,header = T)[-(1:2),]
reports[9,RecipientFirstName:="༼ つ ◕_◕ ༽つ"]
setnames(reports,"RecipientFirstName","team")
## Leaderboard #################################################################
full_leaderboard <- merge(
forecast_score[,.(Pinball=round(mean(pinball),2),
Report=report[1],
Student=verified_student[1]),
by="team"],
trade_data[,.(Revenue=round(sum(revenue)/1e6,2),
`Missed submissions`=round(sum(filled)/48)),
by="team"],
by="team",all=T)
full_leaderboard[Report==T & `Missed submissions`<=5 & !team %in% c("Benchmark","quantopia"),
`Forecasting rank`:=rank(Pinball)]
full_leaderboard[Report==T & `Missed submissions`<=5 & !team %in% c("Benchmark","quantopia")
,`Trading rank`:=rank(-Revenue)]
full_leaderboard[,`Combined score`:=`Trading rank`+`Forecasting rank`+`Forecasting rank`/100]
full_leaderboard[!is.na(`Combined score`),`Combined rank`:=rank(`Combined score`)]
full_leaderboard[,`Combined score`:=NULL]
full_leaderboard <- full_leaderboard[order(Pinball),.(Team=team,Pinball,Revenue,`Forecasting rank`,`Trading rank`,`Combined rank`,Report,`Missed submissions`,Student)]
forecast_score_plot <- forecast_score#[dtm < "2024-03-21 00:00:00"]
top_teams_fc <- forecast_score_plot[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
forecast_score_plot <- forecast_score_plot[team %in% top_teams_fc]
setkey(forecast_score_plot,dtm)
forecast_score_plot$team <- factor(forecast_score_plot$team,levels = top_teams_fc)
forecast_score_plot[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score_plot[,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
team_include <- forecast_data[,.N,by=team][N>(39000/2),team]
include_dtm <- energy_data[,dtm]
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<=7.5 | hour(dtm)>=16.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>7.5 & hour(dtm)<16.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
reliability_data <- reliability_data[team %in% team_include]
plot_data <- reliability_data[team%in%top_teams_fc[1:5]]
plot_data$team <- factor(plot_data$team,levels = top_teams_fc)
rel_plot <- ggplot(plot_data,aes(x=quantile,y=empirical,color=team)) +
geom_line(data=reliability_data[!team%in%top_teams_fc[1:5]],
mapping=aes(x=quantile,y=empirical,group=team),
color=gray(0.1,0.1)) +
geom_point(aes(shape=team)) + geom_line() +
geom_abline(slope = 1,intercept = 0, linetype="dashed") +
facet_wrap(~TOD,ncol=3) +
guides(color=guide_legend(title="Team (Top 5)"),
shape=guide_legend(title="Team (Top 5)")) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
xlab("Nominal [%]") + ylab("Empirical [%]") +
custom_theme +
theme(aspect.ratio = 1)
rel_plot
forecast_score_plot
forecast_score_plot[,mean(pinball),by=hour(dtm)]
forecast_score_plot[team=="UI BUD",mean(pinball),by=hour(dtm)]
forecast_score_plot[team=="UI BUD",.(pinball=mean(pinball)),by=hour(dtm)]
ggplot(forecast_score_plot[team=="UI BUD",.(pinball=mean(pinball)),by=hour(dtm)],
aes(x=hour,y=pinball)) +
geom_line() +
custom_theme
forecast_score_plot
forecast_score_plot[team=="UI BUD" & hour(dtm)>7.5 & hour(dtm)<16.5,mean(pinball)]
forecast_score_plot[team=="UI BUD" & hour(dtm)>7.5 & hour(dtm)<16.5,mean(pinball)]
forecast_score_plot[team=="UI BUD" & (hour(dtm)<=7.5 | hour(dtm)>=16.5),mean(pinball)]
forecast_score_plot[team=="UI BUD" & hour(dtm)>7.5 & hour(dtm)<20.5,mean(pinball)]
forecast_score_plot[team=="UI BUD" & (hour(dtm)<=7.5 | hour(dtm)>=20.5),mean(pinball)]
team_include <- forecast_data[,.N,by=team][N>(39000/2),team]
include_dtm <- energy_data[,dtm]
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<=7.5 | hour(dtm)>=20.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>7.5 & hour(dtm)<20.5) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<=7.5 | hour(dtm)>=20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>7.5 & hour(dtm)<20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
team_include <- forecast_data[,.N,by=team][N>(39000/2),team]
include_dtm <- energy_data[,dtm]
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<=7.5 | hour(dtm)>=20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>7.5 & hour(dtm)<20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
reliability_data <- reliability_data[team %in% team_include]
plot_data <- reliability_data[team%in%top_teams_fc[1:5]]
plot_data$team <- factor(plot_data$team,levels = top_teams_fc)
rel_plot <- ggplot(plot_data,aes(x=quantile,y=empirical,color=team)) +
geom_line(data=reliability_data[!team%in%top_teams_fc[1:5]],
mapping=aes(x=quantile,y=empirical,group=team),
color=gray(0.1,0.1)) +
geom_point(aes(shape=team)) + geom_line() +
geom_abline(slope = 1,intercept = 0, linetype="dashed") +
facet_wrap(~TOD,ncol=3) +
guides(color=guide_legend(title="Team (Top 5)"),
shape=guide_legend(title="Team (Top 5)")) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
xlab("Nominal [%]") + ylab("Empirical [%]") +
custom_theme +
theme(aspect.ratio = 1)
rel_plot
ggsave(filename = paste0("figs/reliability.",fig_format), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
forecast_score_plot[team=="UI BUD" & hour(dtm)>7.5 & hour(dtm)<20,mean(pinball)]
forecast_score_plot[team=="UI BUD" & (hour(dtm)<=7.5 | hour(dtm)>=20),mean(pinball)]
rel_plot
ggsave(filename = paste0("figs/reliability.",fig_format), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
ggsave(filename = paste0("figs/reliability.","svg"), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
forecast_score_plot[hour(dtm)>7.5 & hour(dtm)<20,mean(pinball),by=team]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(night=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(day=mean(pinball)),by=team],
by = "team")
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(night=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(day=mean(pinball)),by=team],
by = "team")[order(nigth)]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(night=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(day=mean(pinball)),by=team],
by = "team")[order(night)]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(night)]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(day)]
forecast_score_plot <- forecast_score#[dtm < "2024-03-21 00:00:00"]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(day)]
forecast_score_plot <- forecast_score#[dtm < "2024-03-21 00:00:00"]
top_teams_fc <- forecast_score_plot[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
forecast_score_plot <- forecast_score_plot[team %in% top_teams_fc]
setkey(forecast_score_plot,dtm)
forecast_score_plot$team <- factor(forecast_score_plot$team,levels = top_teams_fc)
forecast_score_plot[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(day)]
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(day)]
team_include <- forecast_data[,.N,by=team][N>(39000/2),team]
include_dtm <- energy_data[,dtm]
reliability_data <- rbind(
forecast_data[dtm %in% include_dtm,.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "All"),
by=c("team","quantile")],
forecast_data[(hour(dtm)<7.5 | hour(dtm)>=20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Overnight"),
by=c("team","quantile")],
forecast_data[(hour(dtm)>=7.5 & hour(dtm)<20) & dtm %in% include_dtm,
.(empirical = 100*mean(actual_mwh<=forecast),
TOD = "Daytime"),
by=c("team","quantile")])
reliability_data <- reliability_data[team %in% team_include]
plot_data <- reliability_data[team%in%top_teams_fc[1:5]]
plot_data$team <- factor(plot_data$team,levels = top_teams_fc)
rel_plot <- ggplot(plot_data,aes(x=quantile,y=empirical,color=team)) +
geom_line(data=reliability_data[!team%in%top_teams_fc[1:5]],
mapping=aes(x=quantile,y=empirical,group=team),
color=gray(0.1,0.1)) +
geom_point(aes(shape=team)) + geom_line() +
geom_abline(slope = 1,intercept = 0, linetype="dashed") +
facet_wrap(~TOD,ncol=3) +
guides(color=guide_legend(title="Team (Top 5)"),
shape=guide_legend(title="Team (Top 5)")) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
xlab("Nominal [%]") + ylab("Empirical [%]") +
custom_theme +
theme(aspect.ratio = 1)
rel_plot
ggsave(filename = paste0("figs/reliability.",fig_format), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
ggsave(filename = paste0("figs/reliability.","svg"), rel_plot,
width = 1.5*fig_size_in[1],height = fig_size_in[2],units = "in")
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(day=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(night=mean(pinball)),by=team],
by = "team")[order(day)]
?cbind
merge(forecast_score_plot[.(All=mean(pinball)),by=team],
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(Daytime=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(Nighttime=mean(pinball)),by=team],
by = "team"),
by = "team")
forecast_score_plot[.(All=mean(pinball)),by=team]
merge(forecast_score_plot[,.(All=mean(pinball)),by=team],
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(Daytime=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(Nighttime=mean(pinball)),by=team],
by = "team"),
by = "team")
merge(forecast_score_plot[,.(All=mean(pinball)),by=team],
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(Daytime=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(Nighttime=mean(pinball)),by=team],
by = "team"),
by = "team")[order(All)]
pinball_tod_table <- merge(forecast_score_plot[,.(All=mean(pinball)),by=team],
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(Daytime=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(Nighttime=mean(pinball)),by=team],
by = "team"),
by = "team")[order(All)]
print(xtable(pinball_tod_table), include.rownames=FALSE)
pinball_tod_table <- merge(forecast_score_plot[,.(All=mean(pinball)),by=team],
merge(forecast_score_plot[hour(dtm)>=7.5 & hour(dtm)<20,
.(Daytime=mean(pinball)),by=team],
forecast_score_plot[hour(dtm)<7.5 | hour(dtm)>=20,
.(Overnight=mean(pinball)),by=team],
by = "team"),
by = "team")[order(All)]
print(xtable(pinball_tod_table), include.rownames=FALSE)
