## Plots
### Revenue evolution:
top_teams <- trade_data[,sum(revenue),by=team][order(V1,decreasing = T)][1:10,team]
mean10 <- trade_data[team%in%top_teams,.(mean10_revenue=mean(revenue)),by=dtm]
mean10[order(dtm),mean10_cumrevenue := cumsum(mean10_revenue)]
trade_data <- merge(trade_data,mean10,by="dtm",all.x=T)
setkey(trade_data,dtm)
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(color_pal_top10,breaks=top_teams) +
custom_theme
p
?scale_color_discrete
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_fill_brewer(palette = "Set3") +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_fill_brewer(palette = "Set3") +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
# scale_fill_brewer(palette = "Set3") +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_brewer(palette = "Set3") +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_brewer(palette = "Set1") +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_brewer(palette = "Paired") +
custom_theme
p
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_fill_manual(values = color_pal_top10) +
custom_theme
p
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc,values = color_pal_top10) +
custom_theme
## Pinball evolution
top_teams_fc <- forecast_score[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
setkey(forecast_score,dtm)
forecast_score[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc,values = color_pal_top10) +
custom_theme
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
require(data.table)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
## Fig format
fig_format <- "pdf"
fig_size_in <- c(8,4.5)
custom_theme <- theme_bw() + theme(text=element_text(size=20,family="serif"))
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
## load data
### Trades, prices and revenue, with missed submissions filled
trade_data <- fread("data/trades.csv")
### Pinball score by timestamp with missed submissions filled
forecast_score <- fread("data/pinball.csv")
### Raw forecast submissions, outturn and pinball, missed submissions not filled
forecast_data <- fread("data/forecasts.csv")
## Plots
### Revenue evolution:
top_teams <- trade_data[,sum(revenue),by=team][order(V1,decreasing = T)][1:10,team]
mean10 <- trade_data[team%in%top_teams,.(mean10_revenue=mean(revenue)),by=dtm]
mean10[order(dtm),mean10_cumrevenue := cumsum(mean10_revenue)]
trade_data <- merge(trade_data,mean10,by="dtm",all.x=T)
setkey(trade_data,dtm)
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p
ggsave(filename = paste0("figs/revenue_top10.",fig_format),p,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
## Pinball evolution
top_teams_fc <- forecast_score[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
setkey(forecast_score,dtm)
forecast_score[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
ggsave(filename = paste0("figs/pinball_top10.",fig_format), p2,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
p2
p
require(data.table)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
## Fig format
fig_format <- "pdf"
fig_size_in <- c(8,4)
custom_theme <- theme_bw() + theme(text=element_text(size=20,family="serif"))
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
## load data
### Trades, prices and revenue, with missed submissions filled
trade_data <- fread("data/trades.csv")
### Pinball score by timestamp with missed submissions filled
forecast_score <- fread("data/pinball.csv")
### Raw forecast submissions, outturn and pinball, missed submissions not filled
forecast_data <- fread("data/forecasts.csv")
## Plots
### Revenue evolution:
top_teams <- trade_data[,sum(revenue),by=team][order(V1,decreasing = T)][1:10,team]
mean10 <- trade_data[team%in%top_teams,.(mean10_revenue=mean(revenue)),by=dtm]
mean10[order(dtm),mean10_cumrevenue := cumsum(mean10_revenue)]
trade_data <- merge(trade_data,mean10,by="dtm",all.x=T)
setkey(trade_data,dtm)
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p
ggsave(filename = paste0("figs/revenue_top10.",fig_format),p,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
## Pinball evolution
top_teams_fc <- forecast_score[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
setkey(forecast_score,dtm)
forecast_score[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
ggsave(filename = paste0("figs/pinball_top10.",fig_format), p2,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
### Energy data
fread("data/Energy_Data_20200920_20240118.csv")
fread("data/Energy_Data_20240119_20240519.csv")
### Energy data
energy_data <- rbind(fread("data/Energy_Data_20200920_20240118.csv"),
fread("data/Energy_Data_20240119_20240519.csv"))
### Energy data
energy_data <- rbind(fread("data/Energy_Data_20200920_20240118.csv"),
fread("data/Energy_Data_20240119_20240519.csv"))
energy_data
energy_data[dtm>="2024-02-20"]
energy_data[dtm>="2024-02-20" & dtm<"2024-05-20"]
energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") & dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC")]
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW)],id.vars = "dtm")
energy_plot_data
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",Value = "Generation [MWh]")
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = 2,cols = 1,scales = "free_y")
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y")
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",Value = "Generation [MWh]")
energy_plot_data
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",value = "Generation [MWh]")
energy_plot_data
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = variable,scales = "free_y")
energy_plot_data
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y")
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
custom_theme
ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]")
ggsave(filename = paste0("figs/wind_solar.",fig_format), p_energy,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]")
custom_theme
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
custom_theme
p_energy
ggsave(filename = paste0("figs/wind_solar.",fig_format), p_energy,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
require(data.table)
require(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
## Fig format
fig_format <- "pdf"
fig_size_in <- c(8,4)
custom_theme <- theme_bw() + theme(
text=element_text(size=20,family="serif"),
strip.background =element_rect(fill="white"))
color_pal_top10 <- RColorBrewer::brewer.pal(10,"Paired")
## load data
### Trades, prices and revenue, with missed submissions filled
trade_data <- fread("data/trades.csv")
### Pinball score by timestamp with missed submissions filled
forecast_score <- fread("data/pinball.csv")
### Raw forecast submissions, outturn and pinball, missed submissions not filled
forecast_data <- fread("data/forecasts.csv")
### Energy data
energy_data <- rbind(fread("data/Energy_Data_20200920_20240118.csv"),
fread("data/Energy_Data_20240119_20240519.csv"))
## Plots
### Competition data
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",value = "Generation [MWh]")
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
custom_theme
p_energy
ggsave(filename = paste0("figs/wind_solar.",fig_format), p_energy,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
### Revenue evolution:
top_teams <- trade_data[,sum(revenue),by=team][order(V1,decreasing = T)][1:10,team]
mean10 <- trade_data[team%in%top_teams,.(mean10_revenue=mean(revenue)),by=dtm]
mean10[order(dtm),mean10_cumrevenue := cumsum(mean10_revenue)]
trade_data <- merge(trade_data,mean10,by="dtm",all.x=T)
setkey(trade_data,dtm)
p <- ggplot(trade_data[team %in% top_teams,.(dtm,rel_revenue=(cumsum(revenue)-mean10_cumrevenue)/1e6),by=team],
aes(x=dtm,y=rel_revenue,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Relative Revenue of Top 10 [£m]") +
guides(color=guide_legend(title="Team (Top 10)")) +
scale_color_discrete(breaks=top_teams) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p
ggsave(filename = paste0("figs/revenue_top10.",fig_format),p,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
## Pinball evolution
top_teams_fc <- forecast_score[,mean(pinball),by=team][order(V1,decreasing = F)][1:10,team]
setkey(forecast_score,dtm)
forecast_score[,n:=as.numeric((dtm-min(dtm))/(60*30)+1)]
p2 <- ggplot(forecast_score[team %in% top_teams_fc,.(dtm,pinball=cumsum(pinball)/n),by=team],
aes(x=dtm,y=pinball,color=team)) +
geom_line() +
xlab("Date/Time") + ylab("Pinball [MWh]") +
guides(color=guide_legend(title="Team (Top 10)")) +
ylim(c(15,32)) +
scale_color_discrete(breaks=top_teams_fc) +
scale_color_manual(values = color_pal_top10) +
custom_theme
p2
ggsave(filename = paste0("figs/pinball_top10.",fig_format), p2,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-01-01",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",value = "Generation [MWh]")
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
custom_theme
p_energy
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"))
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC")) +
custom_theme
p_energy
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_energy
energy_plot_data <- melt(energy_data[dtm>=as.POSIXct("2023-12-01",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,Wind = Wind_MW/2+boa_MWh,Solar=Solar_MW/2)],
id.vars = "dtm",value = "Generation [MWh]")
p_energy <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Generation [MWh]`)) +
geom_line() +
facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_energy
ggsave(filename = paste0("figs/wind_solar.",fig_format), p_energy,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
energy_plot_data
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2023-12-01",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]")
price_plot_data
p_price <- ggplot(data = energy_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,tyep=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,tyep=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-05-19 23:00:00",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-02-27",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-02-24",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=variable)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
# geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
price_plot_data <- melt(energy_data[dtm>=as.POSIXct("2024-02-20",tz = "UTC") &
dtm<as.POSIXct("2024-02-24",tz = "UTC"),
.(dtm,`Day-ahead`=DA_Price,`Imbalance`=SS_Price)],
id.vars = "dtm",value = "Price [£/MWh]",variable.name = "Market")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=Market)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
# geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
ggsave(filename = paste0("figs/prices",fig_format), p_price,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
p_price <- ggplot(data = price_plot_data,
aes(x=dtm,y=`Price [£/MWh]`,linetype=Market)) +
geom_line() +
# facet_grid(rows = "variable",scales = "free_y") +
xlab("Date/Time [settlement period]") +
# geom_vline(xintercept=as.POSIXct("2024-02-20",tz = "UTC"),linetype="dashed") +
custom_theme
p_price
ggsave(filename = paste0("figs/prices",fig_format), p_price,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
ggsave(filename = paste0("figs/prices.",fig_format), p_price,
width = fig_size_in[1],height = fig_size_in[2],units = "in")
